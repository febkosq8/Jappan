<ref *1> [
  <ref *3> NativeConnection {
    base: <ref *2> Mongoose {
      connections: [Circular *1],
      models: [Object],
      events: [EventEmitter],
      __driver: [Object],
      options: [Object],
      _pluralize: [Function: pluralize],
      Schema: [Function],
      model: [Function (anonymous)],
      plugins: [Array],
      default: [Circular *2],
      mongoose: [Circular *2],
      cast: [Function: cast],
      STATES: [Object: null prototype],
      setDriver: [Function: setDriver],
      set: [Function (anonymous)],
      get: [Function (anonymous)],
      createConnection: [Function (anonymous)],
      connect: [Function (anonymous)],
      disconnect: [Function (anonymous)],
      startSession: [Function (anonymous)],
      pluralize: [Function (anonymous)],
      deleteModel: [Function (anonymous)],
      modelNames: [Function (anonymous)],
      plugin: [Function (anonymous)],
      version: '6.7.1',
      Mongoose: [Function: Mongoose],
      SchemaType: [Function],
      SchemaTypes: [Object],
      VirtualType: [Function: VirtualType],
      Types: [Object],
      Query: [Function],
      Model: Model { undefined },
      Document: [Function],
      ObjectId: [Function],
      isValidObjectId: [Function (anonymous)],
      isObjectIdOrHexString: [Function (anonymous)],
      syncIndexes: [Function (anonymous)],
      Decimal128: [Function],
      Mixed: [Function],
      Date: [Function],
      Number: [Function],
      Error: [Function],
      now: [Function: now],
      CastError: [class CastError extends MongooseError],
      SchemaTypeOptions: [class SchemaTypeOptions],
      mongo: [Object],
      mquery: [Function],
      sanitizeFilter: [Function: sanitizeFilter],
      trusted: [Function: trusted],
      skipMiddlewareFunction: [Function: skipWrappedFunction],
      overwriteMiddlewareResult: [Function: overwriteResult]
    },
    collections: {
      eventlogs: [Collection],
      guildlists: [Collection],
      userplaylists: [Collection]
    },
    models: {
      EventLog: Model { EventLog },
      guildList: Model { guildList },
      userPlaylist: Model { userPlaylist }
    },
    config: {},
    replica: false,
    options: null,
    otherDbs: [ [NativeConnection] ],
    relatedDbs: {},
    states: [Object: null prototype] {
      '0': 'disconnected',
      '1': 'connected',
      '2': 'connecting',
      '3': 'disconnecting',
      '99': 'uninitialized',
      disconnected: 0,
      connected: 1,
      connecting: 2,
      disconnecting: 3,
      uninitialized: 99
    },
    _readyState: 3,
    _closeCalled: true,
    _hasOpened: true,
    plugins: [],
    id: 0,
    _queue: [],
    _listening: false,
    _connectionString: 'mongodb+srv://server1:server2@cluster0.oyjmy9h.mongodb.net/Jappan?retryWrites=true&w=majority',
    _connectionOptions: { driverInfo: [Object] },
    client: MongoClient {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: 0,
      s: [Object],
      topology: [Topology],
      _closeCalled: true,
      _destroyCalled: false,
      [Symbol(kCapture)]: false,
      [Symbol(options)]: [Object: null prototype]
    },
    '$initialConnection': Promise { [Circular *3] },
    _events: [Object: null prototype] {
      open: [Function (anonymous)],
      connected: [Function]
    },
    _eventsCount: 2,
    db: Db { s: [Object] },
    host: 'ac-87ng4tu-shard-00-00.oyjmy9h.mongodb.net',
    port: 27017,
    name: 'Jappan',
    '$wasForceClosed': false,
    _destroyCalled: false
  },
  <ref *4> NativeConnection {
    base: <ref *2> Mongoose {
      connections: [Circular *1],
      models: [Object],
      events: [EventEmitter],
      __driver: [Object],
      options: [Object],
      _pluralize: [Function: pluralize],
      Schema: [Function],
      model: [Function (anonymous)],
      plugins: [Array],
      default: [Circular *2],
      mongoose: [Circular *2],
      cast: [Function: cast],
      STATES: [Object: null prototype],
      setDriver: [Function: setDriver],
      set: [Function (anonymous)],
      get: [Function (anonymous)],
      createConnection: [Function (anonymous)],
      connect: [Function (anonymous)],
      disconnect: [Function (anonymous)],
      startSession: [Function (anonymous)],
      pluralize: [Function (anonymous)],
      deleteModel: [Function (anonymous)],
      modelNames: [Function (anonymous)],
      plugin: [Function (anonymous)],
      version: '6.7.1',
      Mongoose: [Function: Mongoose],
      SchemaType: [Function],
      SchemaTypes: [Object],
      VirtualType: [Function: VirtualType],
      Types: [Object],
      Query: [Function],
      Model: Model { undefined },
      Document: [Function],
      ObjectId: [Function],
      isValidObjectId: [Function (anonymous)],
      isObjectIdOrHexString: [Function (anonymous)],
      syncIndexes: [Function (anonymous)],
      Decimal128: [Function],
      Mixed: [Function],
      Date: [Function],
      Number: [Function],
      Error: [Function],
      now: [Function: now],
      CastError: [class CastError extends MongooseError],
      SchemaTypeOptions: [class SchemaTypeOptions],
      mongo: [Object],
      mquery: [Function],
      sanitizeFilter: [Function: sanitizeFilter],
      trusted: [Function: trusted],
      skipMiddlewareFunction: [Function: skipWrappedFunction],
      overwriteMiddlewareResult: [Function: overwriteResult]
    },
    collections: {},
    models: {},
    config: {},
    replica: false,
    options: null,
    otherDbs: [],
    relatedDbs: {},
    states: [Object: null prototype] {
      '0': 'disconnected',
      '1': 'connected',
      '2': 'connecting',
      '3': 'disconnecting',
      '99': 'uninitialized',
      disconnected: 0,
      connected: 1,
      connecting: 2,
      disconnecting: 3,
      uninitialized: 99
    },
    _readyState: 1,
    _closeCalled: undefined,
    _hasOpened: true,
    plugins: [],
    id: 1,
    _queue: [],
    _listening: false,
    _connectionString: 'mongodb://127.0.0.1:8989/JappanLocal',
    _connectionOptions: { driverInfo: [Object] },
    client: MongoClient {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: 0,
      s: [Object],
      topology: [Topology],
      [Symbol(kCapture)]: false,
      [Symbol(options)]: [Object: null prototype]
    },
    '$initialConnection': Promise { [Circular *4] },
    db: Db { s: [Object] },
    host: '127.0.0.1',
    port: 8989,
    name: 'JappanLocal'
  }
]

NativeConnection {
  base: <ref *2> Mongoose {
    connections: [ [Circular *1] ],
    models: { EventLog: Model { EventLog } },
    events: EventEmitter {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false
    },
    __driver: {
      Binary: [Function],
      Collection: [Function: NativeCollection],
      Decimal128: [Function],
      ObjectId: [Function],
      ReadPreference: [Function: readPref],
      getConnection: [Function (anonymous)]
    },
    options: {
      pluralization: true,
      autoIndex: true,
      autoCreate: true,
      [Symbol(mongoose:default)]: true
    },
    _pluralize: [Function: pluralize],
    Schema: [Function: Schema] {
      reserved: [Object: null prototype],
      Types: [Object],
      ObjectId: [Function]
    },
    model: [Function (anonymous)],
    plugins: [ [Array], [Array], [Array], [Array], [Array] ],
    default: [Circular *2],
    mongoose: [Circular *2],
    cast: [Function: cast],
    STATES: [Object: null prototype] {
      '0': 'disconnected',
      '1': 'connected',
      '2': 'connecting',
      '3': 'disconnecting',
      '99': 'uninitialized',
      disconnected: 0,
      connected: 1,
      connecting: 2,
      disconnecting: 3,
      uninitialized: 99
    },
    setDriver: [Function: setDriver],
    set: [Function (anonymous)],
    get: [Function (anonymous)],
    createConnection: [Function (anonymous)],
    connect: [Function (anonymous)],
    disconnect: [Function (anonymous)],
    startSession: [Function (anonymous)],
    pluralize: [Function (anonymous)],
    deleteModel: [Function (anonymous)],
    modelNames: [Function (anonymous)],
    plugin: [Function (anonymous)],
    version: '6.7.1',
    Mongoose: [Function: Mongoose],
    SchemaType: [Function: SchemaType] {
      cast: [Function: cast],
      set: [Function: set],
      get: [Function (anonymous)],
      _isRef: [Function (anonymous)],
      checkRequired: [Function (anonymous)],
      CastError: [class CastError extends MongooseError],
      ValidatorError: [class ValidatorError extends MongooseError]
    },
    SchemaTypes: {
      String: [Function],
      Number: [Function],
      Boolean: [Function],
      DocumentArray: [Function],
      Subdocument: [Function],
      Array: [Function],
      Buffer: [Function],
      Date: [Function],
      ObjectId: [Function],
      Mixed: [Function],
      Decimal: [Function],
      Decimal128: [Function],
      Map: [Function],
      UUID: [Function],
      Oid: [Function],
      Object: [Function],
      Bool: [Function],
      ObjectID: [Function]
    },
    VirtualType: [Function: VirtualType],
    Types: {
      Array: [Function: MongooseArray],
      Buffer: [Function],
      Embedded: [Function],
      Document: [Function],
      DocumentArray: [Function: MongooseDocumentArray],
      Decimal128: [Function],
      ObjectId: [Function],
      Map: [class MongooseMap extends Map],
      Subdocument: [Function: Subdocument]
    },
    Query: [Function: Query] { base: [Object], 'use$geoWithin': true },
    Model: Model { undefined },
    Document: [Function: Document] {
      _events: undefined,
      _eventsCount: 0,
      _maxListeners: undefined,
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount],
      eventNames: [Function: eventNames],
      ValidationError: [class ValidationError extends MongooseError]
    },
    ObjectId: [Function: ObjectId] {
      schemaName: 'ObjectId',
      defaultOptions: {},
      get: [Function (anonymous)],
      set: [Function: set],
      _checkRequired: [Function (anonymous)],
      _cast: [Function: castObjectId],
      cast: [Function: cast],
      _defaultCaster: [Function (anonymous)],
      checkRequired: [Function (anonymous)]
    },
    isValidObjectId: [Function (anonymous)],
    isObjectIdOrHexString: [Function (anonymous)],
    syncIndexes: [Function (anonymous)],
    Decimal128: [Function: Decimal128] {
      schemaName: 'Decimal128',
      defaultOptions: {},
      _cast: [Function: castDecimal128],
      set: [Function: set],
      cast: [Function: cast],
      _defaultCaster: [Function (anonymous)],
      _checkRequired: [Function (anonymous)],
      checkRequired: [Function (anonymous)]
    },
    Mixed: [Function: Mixed] {
      schemaName: 'Mixed',
      defaultOptions: {},
      get: [Function (anonymous)],
      set: [Function: set]
    },
    Date: [Function: SchemaDate] {
      schemaName: 'Date',
      defaultOptions: {},
      _cast: [Function: castDate],
      set: [Function: set],
      cast: [Function: cast],
      _defaultCaster: [Function (anonymous)],
      _checkRequired: [Function (anonymous)],
      checkRequired: [Function (anonymous)]
    },
    Number: [Function: SchemaNumber] {
      get: [Function (anonymous)],
      set: [Function: set],
      _cast: [Function: castNumber],
      cast: [Function: cast],
      _defaultCaster: [Function (anonymous)],
      schemaName: 'Number',
      defaultOptions: {},
      _checkRequired: [Function (anonymous)],
      checkRequired: [Function (anonymous)]
    },
    Error: [class MongooseError extends Error] {
      messages: [Object],
      Messages: [Object],
      DocumentNotFoundError: [class DocumentNotFoundError extends MongooseError],
      CastError: [class CastError extends MongooseError],
      ValidationError: [class ValidationError extends MongooseError],
      ValidatorError: [class ValidatorError extends MongooseError],
      VersionError: [class VersionError extends MongooseError],
      ParallelSaveError: [class ParallelSaveError extends MongooseError],
      OverwriteModelError: [class OverwriteModelError extends MongooseError],
      MissingSchemaError: [class MissingSchemaError extends MongooseError],
      MongooseServerSelectionError: [class MongooseServerSelectionError extends MongooseError],
      DivergentArrayError: [class DivergentArrayError extends MongooseError],
      StrictModeError: [class StrictModeError extends MongooseError]
    },
    now: [Function: now],
    CastError: [class CastError extends MongooseError],
    SchemaTypeOptions: [class SchemaTypeOptions],
    mongo: {
      BSON: [Getter],
      Binary: [Getter],
      BSONRegExp: [Getter],
      BSONSymbol: [Getter],
      Code: [Getter],
      DBRef: [Getter],
      Decimal128: [Getter],
      Double: [Getter],
      Int32: [Getter],
      Long: [Getter],
      Map: [Getter],
      MaxKey: [Getter],
      MinKey: [Getter],
      ObjectId: [Getter],
      Timestamp: [Getter],
      ChangeStreamCursor: [Getter],
      ObjectID: [Function],
      MongoBulkWriteError: [Getter],
      MongoAPIError: [Getter],
      MongoAWSError: [Getter],
      MongoBatchReExecutionError: [Getter],
      MongoChangeStreamError: [Getter],
      MongoCompatibilityError: [Getter],
      MongoCursorExhaustedError: [Getter],
      MongoCursorInUseError: [Getter],
      MongoDecompressionError: [Getter],
      MongoDriverError: [Getter],
      MongoError: [Getter],
      MongoExpiredSessionError: [Getter],
      MongoGridFSChunkError: [Getter],
      MongoGridFSStreamError: [Getter],
      MongoInvalidArgumentError: [Getter],
      MongoKerberosError: [Getter],
      MongoMissingCredentialsError: [Getter],
      MongoMissingDependencyError: [Getter],
      MongoNetworkError: [Getter],
      MongoNetworkTimeoutError: [Getter],
      MongoNotConnectedError: [Getter],
      MongoParseError: [Getter],
      MongoRuntimeError: [Getter],
      MongoServerClosedError: [Getter],
      MongoServerError: [Getter],
      MongoServerSelectionError: [Getter],
      MongoSystemError: [Getter],
      MongoTailableCursorError: [Getter],
      MongoTopologyClosedError: [Getter],
      MongoTransactionError: [Getter],
      MongoUnexpectedServerResponseError: [Getter],
      MongoWriteConcernError: [Getter],
      AbstractCursor: [Getter],
      Admin: [Getter],
      AggregationCursor: [Getter],
      CancellationToken: [Getter],
      ChangeStream: [Getter],
      ClientSession: [Getter],
      Collection: [Getter],
      Db: [Getter],
      FindCursor: [Getter],
      GridFSBucket: [Getter],
      GridFSBucketReadStream: [Getter],
      GridFSBucketWriteStream: [Getter],
      ListCollectionsCursor: [Getter],
      ListIndexesCursor: [Getter],
      Logger: [Getter],
      MongoClient: [Getter],
      OrderedBulkOperation: [Getter],
      UnorderedBulkOperation: [Getter],
      Promise: [Getter],
      BatchType: [Getter],
      GSSAPICanonicalizationValue: [Getter],
      AuthMechanism: [Getter],
      Compressor: [Getter],
      CURSOR_FLAGS: [Getter],
      AutoEncryptionLoggerLevel: [Getter],
      MongoErrorLabel: [Getter],
      ExplainVerbosity: [Getter],
      LoggerLevel: [Getter],
      ServerApiVersion: [Getter],
      BSONType: [Getter],
      ReturnDocument: [Getter],
      ProfilingLevel: [Getter],
      ReadConcernLevel: [Getter],
      ReadPreferenceMode: [Getter],
      ServerType: [Getter],
      TopologyType: [Getter],
      ReadConcern: [Getter],
      ReadPreference: [Getter],
      WriteConcern: [Getter],
      CommandFailedEvent: [Getter],
      CommandStartedEvent: [Getter],
      CommandSucceededEvent: [Getter],
      ConnectionCheckedInEvent: [Getter],
      ConnectionCheckedOutEvent: [Getter],
      ConnectionCheckOutFailedEvent: [Getter],
      ConnectionCheckOutStartedEvent: [Getter],
      ConnectionClosedEvent: [Getter],
      ConnectionCreatedEvent: [Getter],
      ConnectionPoolClearedEvent: [Getter],
      ConnectionPoolClosedEvent: [Getter],
      ConnectionPoolCreatedEvent: [Getter],
      ConnectionPoolMonitoringEvent: [Getter],
      ConnectionPoolReadyEvent: [Getter],
      ConnectionReadyEvent: [Getter],
      ServerClosedEvent: [Getter],
      ServerDescriptionChangedEvent: [Getter],
      ServerHeartbeatFailedEvent: [Getter],
      ServerHeartbeatStartedEvent: [Getter],
      ServerHeartbeatSucceededEvent: [Getter],
      ServerOpeningEvent: [Getter],
      TopologyClosedEvent: [Getter],
      TopologyDescriptionChangedEvent: [Getter],
      TopologyOpeningEvent: [Getter],
      SrvPollingEvent: [Getter]
    },
    mquery: [Function: Query] {
      permissions: [Object],
      _isPermitted: [Function (anonymous)],
      canMerge: [Function (anonymous)],
      setGlobalTraceFunction: [Function (anonymous)],
      utils: [Object],
      env: [Object],
      Collection: [class NodeCollection extends Collection],
      BaseCollection: [Function],
      Promise: [Function: Promise]
    },
    sanitizeFilter: [Function: sanitizeFilter],
    trusted: [Function: trusted],
    skipMiddlewareFunction: [Function: skipWrappedFunction],
    overwriteMiddlewareResult: [Function: overwriteResult]
  },
  collections: {
    eventlogs: Collection {
      collection: null,
      Promise: [Function: Promise],
      modelName: 'EventLog',
      _closed: false,
      opts: [Object],
      name: 'eventlogs',
      collectionName: 'eventlogs',
      conn: [Circular *1],
      queue: [Array],
      buffer: true,
      emitter: [EventEmitter]
    }
  },
  models: { EventLog: Model { EventLog } },
  config: {},
  replica: false,
  options: null,
  otherDbs: [],
  relatedDbs: {},
  states: [Object: null prototype] {
    '0': 'disconnected',
    '1': 'connected',
    '2': 'connecting',
    '3': 'disconnecting',
    '99': 'uninitialized',
    disconnected: 0,
    connected: 1,
    connecting: 2,
    disconnecting: 3,
    uninitialized: 99
  },
  _readyState: 2,
  _closeCalled: false,
  _hasOpened: false,
  plugins: [],
  id: 0,
  _queue: [
    {
      fn: [Function: createCollection],
      ctx: [Circular *1],
      args: [Array]
    }
  ],
  _listening: false,
  _connectionString: 'mongodb+srv://server1:server2@cluster0.oyjmy9h.mongodb.net/Jappan?retryWrites=true&w=majority',
  _connectionOptions: { driverInfo: { name: 'Mongoose', version: '6.7.1' } },
  client: MongoClient {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: 0,
    s: {
      url: 'mongodb+srv://server1:server2@cluster0.oyjmy9h.mongodb.net/Jappan?retryWrites=true&w=majority',
      bsonOptions: [Object],
      namespace: [MongoDBNamespace],
      hasBeenClosed: false,
      sessionPool: [ServerSessionPool],
      activeSessions: Set(0) {},
      options: [Getter],
      readConcern: [Getter],
      writeConcern: [Getter],
      readPreference: [Getter],
      logger: [Getter],
      isMongoClient: [Getter]
    },
    [Symbol(kCapture)]: false,
    [Symbol(options)]: [Object: null prototype] {
      hosts: [],
      credentials: [MongoCredentials],
      compressors: [Array],
      connectTimeoutMS: 30000,
      dbName: 'Jappan',
      directConnection: false,
      metadata: [Object],
      enableUtf8Validation: true,
      forceServerObjectId: false,
      heartbeatFrequencyMS: 10000,
      keepAlive: true,
      keepAliveInitialDelay: 120000,
      loadBalanced: false,
      localThresholdMS: 15,
      logger: [Logger],
      maxConnecting: 2,
      maxIdleTimeMS: 0,
      maxPoolSize: 100,
      minPoolSize: 0,
      minHeartbeatFrequencyMS: 500,
      monitorCommands: false,
      noDelay: true,
      pkFactory: [Object],
      raw: false,
      readPreference: [ReadPreference],
      retryReads: true,
      retryWrites: true,
      serverSelectionTimeoutMS: 30000,
      socketTimeoutMS: 0,
      srvMaxHosts: 0,
      srvServiceName: 'mongodb',
      writeConcern: [WriteConcern],
      waitQueueTimeoutMS: 0,
      zlibCompressionLevel: 0,
      userSpecifiedAuthSource: false,
      userSpecifiedReplicaSet: false,
      srvHost: 'cluster0.oyjmy9h.mongodb.net',
      tls: true
    }
  },
  '$initialConnection': Promise { <pending> },
  _events: [Object: null prototype] { open: [Function (anonymous)] },
  _eventsCount: 1
}